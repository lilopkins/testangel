use std::io::Cursor;
use std::path::Path;
use std::fs;

use base64::Engine;
use genpdf::{elements, Element};
use genpdf::style::{Style, StyledString};
use testangel_ipc::prelude::*;

// TODO Remove so many assumptions
pub fn save_report<P: AsRef<Path>>(to: P, evidence: Vec<Evidence>) {
    fs::create_dir_all("./.tafonts").unwrap();
    fs::write(
        "./.tafonts/LiberationSans-Bold.ttf",
        include_bytes!("./fonts/LiberationSans-Bold.ttf"),
    )
    .unwrap();
    fs::write(
        "./.tafonts/LiberationSans-BoldItalic.ttf",
        include_bytes!("./fonts/LiberationSans-BoldItalic.ttf"),
    )
    .unwrap();
    fs::write(
        "./.tafonts/LiberationSans-Italic.ttf",
        include_bytes!("./fonts/LiberationSans-Italic.ttf"),
    )
    .unwrap();
    fs::write(
        "./.tafonts/LiberationSans-Regular.ttf",
        include_bytes!("./fonts/LiberationSans-Regular.ttf"),
    )
    .unwrap();

    let font_family =
        genpdf::fonts::from_files("./.tafonts", "LiberationSans", None).unwrap();
    let mut doc = genpdf::Document::new(font_family);
    doc.set_title("TestAngel Evidence");
    let mut decorator = genpdf::SimplePageDecorator::new();
    decorator.set_margins(10);
    decorator.set_header(|page_no| {
        elements::PaddedElement::new(
            elements::LinearLayout::vertical()
                .element(elements::Text::new(StyledString::new(
                    "Flow Evidence",
                    Style::new().bold().with_font_size(18),
                )))
                .element(elements::Text::new(StyledString::new(
                    format!(
                        "Page {page_no} - Generated by TestAngel at {}",
                        chrono::Local::now().format("%Y-%m-%d %H:%M")
                    ),
                    Style::new().with_font_size(10),
                ))),
            (0, 0, 4, 0),
        )
    });
    doc.set_page_decorator(decorator);

    for ev in &evidence {
        doc.push(
            elements::Paragraph::new(ev.label.clone()).padded((3, 0, 0, 0)),
        );
        match &ev.content {
            EvidenceContent::Textual(text) => {
                doc.push(elements::Paragraph::new(text))
            }
            EvidenceContent::ImageAsPngBase64(base64) => {
                let data = base64::engine::general_purpose::STANDARD
                    .decode(base64)
                    .unwrap();
                doc.push(
                    elements::Image::from_reader(Cursor::new(data)).unwrap(),
                );
            }
        }
    }

    doc.render_to_file(to.as_ref().with_extension("pdf")).unwrap();
    fs::remove_dir_all("./.tafonts").unwrap();
}
